# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddLifeMomentInput {
  description: String!
  id: String!
  occurredOn: String
  petId: String!
  type: LifeMomentType!
}

type AddLifeMomentResponse {
  id: String!
}

input AddPetInput {
  anniversaryDate: DateTime!
  color: String!
  gender: Gender!
  id: String!
  name: String!
  species: PetSpecies!
  sterilized: Boolean!
}

type AddPetResponse {
  id: String!
}

input AddVeterinaryInput {
  id: String!
  name: String!
}

type AddVeterinaryResponse {
  id: String!
}

input AuthenticateAccountInput {
  email: String!
  password: String!
}

type AuthenticateAccountResponse {
  accountId: String!
  refreshToken: String!
  token: String!
  userId: String!
}

input ChangeUserPreferredLanguageInput {
  languageCode: LanguageCode!
}

type ChangeUserPreferredLanguageResponse {
  success: Boolean!
}

input CreateAccountInput {
  email: String!
  nickname: String!
  password: String!
}

type CreateAccountResponse {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteVeterinaryInput {
  id: String!
}

type DeleteVeterinaryResponse {
  id: String!
}

enum Gender {
  Female
  Male
}

input GetLifeMomentInput {
  id: String!
}

input GetPetInput {
  id: String!
}

input GetVeterinaryInput {
  id: ID!
}

type HealthCheckResponse {
  timestamp: DateTime!
}

enum LanguageCode {
  en
  es
}

type LifeMoment {
  createdBy: String!
  description: String
  id: String!
  occurredOn: String!
  petId: String!
  theme: LifeMomentTheme!
  type: LifeMomentType!
}

enum LifeMomentTheme {
  Activity
  Celebration
  DeliciousMoments
  Farewell
  GroomingAndCare
  Memories
  Wellness
}

enum LifeMomentType {
  Achievement
  Anniversary
  Arrival
  Bath
  Death
  DietChange
  Discomfort
  Excursion
  Exercise
  Gift
  Goodbye
  GroomingVisit
  Hydration
  Illness
  Injury
  Medication
  Move
  NailCut
  Play
  Socialization
  SpecialMeal
  Surgery
  Training
  Vaccination
  VeterinaryVisit
  Walk
}

type Mutation {
  addLifeMoment(input: AddLifeMomentInput!): AddLifeMomentResponse!
  addPet(input: AddPetInput!): AddPetResponse!
  addVeterinary(input: AddVeterinaryInput!): AddVeterinaryResponse!
  authenticateAccount(input: AuthenticateAccountInput!): AuthenticateAccountResponse!
  changeUserPreferredLanguage(input: ChangeUserPreferredLanguageInput!): ChangeUserPreferredLanguageResponse!
  createAccount(input: CreateAccountInput!): CreateAccountResponse!
  deleteVeterinary(input: DeleteVeterinaryInput!): DeleteVeterinaryResponse!
  refreshToken(input: RefreshTokenInput!): RefreshTokenResponse!
  removeLifeMoment(input: RemoveLifeMomentInput!): Boolean!
  removePet(input: RemovePetInput!): RemovePetResponse!
  updateLifeMoment(input: UpdateLifeMomentInput!): UpdateLifeMomentResponse!
  updatePet(input: UpdatePetInput!): UpdatePetResponse!
  updateVeterinary(input: UpdateVeterinaryInput!): UpdateVeterinaryResponse!
}

type Pet {
  anniversaryDate: String
  color: String!
  createdAt: String!
  gender: Gender!
  id: String!
  microchipNumber: String
  name: String!
  ownerId: String!
  species: String!
  sterilized: Boolean!
}

enum PetSpecies {
  All
  Cat
  Dog
}

type Query {
  getLifeMoment(input: GetLifeMomentInput!): LifeMoment!
  getPet(input: GetPetInput!): Pet!
  getVeterinary(input: GetVeterinaryInput!): Veterinary!
  healthCheck: HealthCheckResponse!
  searchAllPets(input: SearchAllPetsInput!): [Pet!]!
  searchLifeMoments(input: SearchLifeMomentsInput!): [LifeMoment!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

type RefreshTokenResponse {
  refreshToken: String!
  token: String!
}

input RemoveLifeMomentInput {
  id: String!
}

input RemovePetInput {
  id: String!
}

type RemovePetResponse {
  id: String!
}

input SearchAllPetsInput {
  ownerId: String!
}

input SearchLifeMomentsInput {
  petId: String!
}

input UpdateLifeMomentInput {
  description: String
  id: String!
  occurredOn: DateTime
}

type UpdateLifeMomentResponse {
  id: String!
}

input UpdatePetInput {
  anniversaryDate: DateTime
  color: String
  gender: Gender
  id: String!
  microchipNumber: String
  name: String
  sterilized: Boolean
}

type UpdatePetResponse {
  id: String!
}

input UpdateVeterinaryInput {
  address: String
  email: String
  emergencyPhone: String
  id: String!
  name: String
  notes: String
  primaryPhone: String
}

type UpdateVeterinaryResponse {
  id: String!
}

type Veterinary {
  address: String
  createdAt: String!
  deletedAt: String
  email: String
  emergencyPhone: String
  id: ID!
  name: String!
  notes: String
  primaryPhone: String
  updatedAt: String
}